# 0.1 Requirements
    preparations: node.JS, npm, npx, git
        node.JS
            설치 확인: 콘솔에 node-v 확인
            설치사이트: nodejs.org
            버전: 상관 없다 함
        npm
            설치 확인: node.JS 설치하고, console에 npm 입력 (node.JS 설치시 npm 자동 설치됨)
        npx
            npx는 별도 설치 필요
            설치 방법: (콘솔) npm install npx -g (node.JS, npm 설치 확인 후 설치)
        git
            설치 확인: (콘솔) git --version
            설치 안되어있으면 git 설치 (github 아니라 git)


# 0.2 Theory Requirements
    preparations: HTML, CSS, JS, node.js(package.json)


# 0.3 Why React


# 1.0 Creating your first React App
    create-react-app
        create-react-app 을 통해서 React Web App을 Set up 해야 편하게 React를 이용할 수 있다.
        설치 방법: (콘솔) cd Documents (Enter) npx create-react-app 파일명 - npx create-react-app movie_app
            (나는 Window라 그런가 cd Documents로 경로 변경이 안돼서 바로 npx create-react-app movie_app 해줌)
    
    READEME.md 내부 내용 삭제(나는 상위 폴더 reactjs에 복사) 후
        React JS Fundamentals Course(2019 Update!) 입력
    
    package.json
            "scripts": {
                "start": "react-scripts start",
                "build": "react-scripts build",
                "test": "react-scripts test",
                "eject": "react-scripts eject"
            },

            에서 test, eject는 필요없으니 지운다

            "scripts": {
                "start": "react-scripts start",
                "build": "react-scripts build",
            },
    
    yarn.lock
        기본적으로 설치할때 따라오는데, 필요 없으니 삭제
    
    개발 시작
        npm start
            나는 npm start 했떠니 아래와 같은 오류 발생
                C:\Users\User\Desktop\reactjs>npm start
                npm ERR! code ENOENT
                npm ERR! syscall open
                npm ERR! path C:\Users\User\Desktop\reactjs\package.json
                npm ERR! errno -4058
                npm ERR! enoent ENOENT: no such file or directory, open 'C:\Users\User\Desktop\reactjs\package.json'
                npm ERR! enoent This is related to npm not being able to find a file.
                npm ERR! enoent

                npm ERR! A complete log of this run can be found in:
                npm ERR!     C:\Users\User\AppData\Roaming\npm-cache\_logs\2021-06-13T05_42_43_603Z-debug.log
            -> 실제 파일이 있는 경로에서 npm start를 해줘야 한다고 함
            -> 나는 movie_app의 상위폴더인 reactjs에서 npm start를 했음
            -> movie_app을 시작경로로 해서 npm start


# 1.1 Creating a github Respository
    (콘솔) git init
    
    github 사이트 가서 respository 생성
        package.json에 있는 name과 되도록 동일하게 respository 생성
        public
        READEME 등 선택사항 건들지 말기
        주어지는 주소 복사: https://github.com/Junanjunan/movie_app.git

    (콘솔) git remote add origin https://github.com/Junanjunan/movie_app.git

    (콘솔) git add . (git add everything)
    (콘솔) git commit -m "#1.0 Creating your first React App"
    (콘솔) git push origin master


# 1.2 How does React work?
    기본적인 것만 가지고 설명할 것이기 때문에 몇가지는 삭제

    (src/index.js)
        기본적으로 아래와 같이 되어 있음

        import React from 'react';
        import ReactDOM from 'react-dom';
        import './index.css';
        import App from './App';
        import reportWebVitals from './reportWebVitals';

        ReactDOM.render(
        <React.StrictMode>
            <App />
        </React.StrictMode>,
        document.getElementById('root')
        );

        // If you want to start measuring performance in your app, pass a function
        // to log results (for example: reportWebVitals(console.log))
        // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
        reportWebVitals();

        여기서 몇가지 지우고 아래와 같이 남긴다

        import React from 'react';
        import ReactDOM from 'react-dom';
        import App from './App';

        ReactDOM.render(
        <React.StrictMode>
            <App />
        </React.StrictMode>,
        document.getElementById('root')
        );
    
    (src)
        logo.svg 삭제
        serviceWorker.js 삭제 (난 처음부터 없음)
        index.css 삭제
        App.test.js 삭제
        App.css 삭제
        최종적으로 index.js, App.js만 남기면 된다고 함(나는 우선 언급안되고 남아있는 것들 삭제 안하고 남겨둠)

    (src/App.js)
        import logo from './logo.svg'; 삭제
        import './App.css'; 삭제
        강에의는 import React from 'react'; 가 있는데 난 없음 -> 추가? 우선 없이 해보자

        (처음)
        import logo from './logo.svg';
        import './App.css';

        function App() {
        return (
            <div className="App">
            <header className="App-header">
                <img src={logo} className="App-logo" alt="logo" />
                <p>
                Edit <code>src/App.js</code> and save to reload.
                </p>
                <a
                className="App-link"
                href="https://reactjs.org"
                target="_blank"
                rel="noopener noreferrer"
                >
                Learn React
                </a>
            </header>
            </div>
        );
        }

        export default App;

        (지우고 난 후)
        function App() {
        return (
            <div className="App">
            </div>
        );
        }

        export default App;


    (src/App.js)
        function App() {
        return (
            <div className="App">
            Hello
            </div>
        );
        }

        export default App;
        등 넣어주면 자동으로 웹에 반영

    (public/index.html)
        <div id="root"></div> 
        
        비어있음, 근데 web에서 f12 해서 보면 
        <div id="root">
            <div class="App">Hello</div>
        </div>
        로 되어있음

        -> React의 기능임
        (src/index.js)를 보면 알 수 있음
            ReactDOM.render(
            <React.StrictMode>
                <App />
            </React.StrictMode>,
            document.getElementById('root')
            );


# 2.0 JSX & PROPS
    (src/index.js)를 보면 알 수 있음
        ReactDOM.render(
        <React.StrictMode>
            <App />                         # <App />: component라 한다. 
        </React.StrictMode>,
        document.getElementById('root')
        );

    component: HTML을 반환하는 함수
        위에서 <App />을 App 같은 형태로 사용 할 수 없다
        -> <App /> 같이 javascript와 HTML 사이의 이러한 조합을 JSX 라고 한다. (react에서 나온 react에 특화된 개념)

    component를 만드는 방법 실습
        
        (src/Potato.js)
            import React from "react";   # component를 작성할 때마다 호출해줘야 함 : 이것을 하지 않으면 react가 이곳에 jsx가 있는 component를 사용하는 것을 이해하지 못함

            function Potato() {          # Potato(): 대문자로 시작해야 함
                return <h3>I love potato</h3>;
            }

            export default Potato;
        
        (src/index.js) 에 추가해서
            import React from 'react';
            import ReactDOM from 'react-dom';
            import App from './App';

            ReactDOM.render(
            <React.StrictMode>
                <App />
            </React.StrictMode>,
            document.getElementById('root')
            );

            아래와 같이 하면 오류가 난다고 했는데, 이제 버전이 바껴서 아래와 같이 해도 오류 안나고 실행 됨
            import React from 'react';
            import ReactDOM from 'react-dom';
            import App from './App';
            import Potato from "./Potato";

            ReactDOM.render(
            <React.StrictMode>
                <App /><Potato />
            </React.StrictMode>,
            document.getElementById('root')
            );
            
            -> react application이 하나의 component만을 rendering 해야하기 때문.(여기서 그 하나의 component가 App)
            -> Potato component를 옮기자

        * 예전 버전에서는 위 방법 안됐지만, 지금은 된다. 위 방법이 더 간결한 듯
        (src/index.js)
            import React from 'react';
            import ReactDOM from 'react-dom';
            import App from './App';

            ReactDOM.render(
            <React.StrictMode>
                <App />
            </React.StrictMode>,
            document.getElementById('root')
            );
        
        (src/App.js)
            import Potato from './Potato';

            function App() {
            return (
                <div className="App">
                    <h1>Hello</h1>
                    <Potato />
                </div>
            );
            }

            export default App;


# 2.1 Reusable Components with JSX+Props
    file 간의 혼란을 피하기 위해 Potato.js file을 지우자
    JSX에서 두번째로 이해해야 하는 것: component에 정보를 보낼 수 있다는 것
    react가 멋진 이유는 재사용 가능한 component를 만들 수 있다는 점(반복 사용 가능)

    component가 정보를 어떻게 전달하는지 보자
    (src/Food.js)
        import React from "react";

        function Food(props) {
            console.log(props);
            return (
                <h1>I like food</h1>
            );
        }

        export default Food;

    (src/index.js)
        import React from 'react';
        import ReactDOM from 'react-dom';
        import App from './App';
        import Potato from './Potato';
        import Food from './Food';

        ReactDOM.render(
        <React.StrictMode>
            <App /><Potato /><Food fav="kimchi"/>
        </React.StrictMode>,
        document.getElementById('root')
        );

        fav를 props라 한다.
        위와 같이 하고 웹에서 console을 보면 Object로 fav: "kimchi"가 있는 것을 볼 수 있다
        이 Object는 component로 전달 된 모든 props(정보)들이다.
    
    (src/Food.js)
        import React from "react";

        function Food(props) {
            console.log(props.fav);
            return (
                <h1>I like {props.fav}</h1>
            );
        }

        export default Food;

    또는
    (src/Food.js)
        import React from "react";

        function Food({fav}) {
            console.log(fav);
            return (
                <h1>I like {fav}</h1>
            );
        }

        export default Food;
    위와 같이 해서 중복적으로 component를 props와 함께 사용


# 2.2 Dynamic Component Generation
    (src/App.js)
        const foodILike = [{
        name: "Kimchi",
        image: "http://aeriskitchen.com/wp-content/uploads/2008/09/kimchi_bokkeumbap_02-.jpg"
        },
        {
        name: "Doncasu",
        image: "https://s3-media3.fl.yelpcdn.com/bphoto/7F9eTTQ_yxaWIRytAu5feA/ls.jpg""
        }];

        function Food({name, picture}) {
            return (
                <div>
                    <h2>I like {name}</h2>
                    <img src={picture} />
                </div>
            );
        }

        function App() {
        return (
            <div className="App">
            <h1>Hello</h1>
            {foodILike.map(dish => <Food name={dish.name}  picture={dish.image}/>)}    # dish: foodILike의 array에 있는 각각의 item 의미
            </div>
        );
        }

        export default App;

        -> dish: object 의미 - 매우 중요

    
# 2.3 map Recap
    part 1(함수 바깥으로 꺼내보기)
        (src/App.js) 
            const foodILike = [{
            name: "Kimchi",
            image: "http://aeriskitchen.com/wp-content/uploads/2008/09/kimchi_bokkeumbap_02-.jpg"
            },
            {
            name: "Doncasu",
            image: "https://s3-media3.fl.yelpcdn.com/bphoto/7F9eTTQ_yxaWIRytAu5feA/ls.jpg"
            }];

            function Food({name, picture}) {
            return (
                <div>
                    <h2>I like {name}</h2>
                    <img src={picture} />
                </div>
            );
            }

            function renderFood(dish){
                return <Food name={dish.name} picture={dish.image} />
            }

            function App() {
            return (
                <div className="App">
                {foodILike.map(renderFood)}
                </div>
            );
            }

            export default App;  
    
    part 2: 원래대로 진행
        (src/App.js)
            const foodILike = [{
            name: "Kimchi",
            image: "http://aeriskitchen.com/wp-content/uploads/2008/09/kimchi_bokkeumbap_02-.jpg"
            },
            {
            name: "Doncasu",
            image: "https://s3-media3.fl.yelpcdn.com/bphoto/7F9eTTQ_yxaWIRytAu5feA/ls.jpg"
            }];

            function Food({name, picture}) {
            return (
                <div>
                    <h2>I like {name}</h2>
                    <img src={picture} />
                </div>
            );
            }


            function App() {
            return (
                <div className="App">
                {foodILike.map(dish => <Food name={dish.name} picture={dish.image} />)}
                </div>
            );
            }

            export default App;

        위와 같이 해주고 web에서 console을 보면
        Warning: Each child in a list should have a unique "key" prop. 생긴다
        이 말은 모든 react의 element들은 유일해야 하는데, array 안에 집어넣을때 element들이 유일성을 잃어버리게 된다
        그래서 array의 element마다 id를 부여한다

        (src/App.js)
            const foodILike = [{
            id: 1,
            name: "Kimchi",
            image: "http://aeriskitchen.com/wp-content/uploads/2008/09/kimchi_bokkeumbap_02-.jpg"
            },
            {
            id: 2,
            name: "Doncasu",
            image: "https://s3-media3.fl.yelpcdn.com/bphoto/7F9eTTQ_yxaWIRytAu5feA/ls.jpg"
            }];

            function Food({name, picture}) {
            return (
                <div>
                    <h2>I like {name}</h2>
                <img src={picture} alt={name} />           # alt 안넣어주면: img elements must have an alt prop, either with meaningful text, or an empty string for decorative images  jsx-a11y/alt-text 이런게 console에 뜸
                </div>
            );
            }


            function App() {
            return (
                <div className="App">
                {foodILike.map(dish => <Food key={dish.id} name={dish.name} picture={dish.image} />)}
                </div>
            );
            }

            export default App;


# 2.4 Protection with PropTypes
    내가 원하는 prop을 제대로 받고 있는지 확인하는 법
    pop-types 설치: npm i prop-types

    (src/App.js)
    import PropTypes from "prop-types";

    Food.propTypes = {
        name: PropTypes.string.isRequired,
        picture: PropTypes.string.isRequired,
        rating: PropTypes.string.isRequired
    }

    -> 이렇게 하고 console 확인하면 오류 생긴것 확인 가능: rating은 number인데 string인지 확인하고 있으므로 오류 발생
        rating: PropTypes.number.isRequired 로 하면 오류 해결
    -> isRequired는 선택사항임

    * Failed to compile 에러 발생시: 갑자기 이유를 찾기 힘들게 안되면 npm install 을 console에 엔터해주면 될 것임

    Food.propTypes 에 설정해준 propTypes는 정해진 것임. sexyTypes 등으로 마음대로 설정 X


# 3.0 Class Components and State
    - class React.Component는 return을 갖고 있지 않고 render를 갖는다. - function이 아니기 때문에
    - react는 자동적으로 class component의 render method를 실행한다.
    (src/App.js)
        import React from "react";

        class App extends React.Component{
        render(){
            return <h1>I am a class component</h1>
        }
        }

        export default App;
    
    - React.Component에 있는 state는 object이고 component의 data를 넣을 공간이 있고, 이 데이터는 변한다. -> state를 사용하는 이유..

    (src/App.js)
        import React from "react";

        class App extends React.Component{
        state = {
            count: 0
        };
        render(){
            return <h1>The number is {this.state.count}</h1>
        }
        }

        export default App;

    - state에 바꾸고 싶은 data를 넣을 수 있다.


# 3.1 All you need to know about State
    state 값을 변경해주는 것은 setState로?
    setState를 호출하면 react는 state를 수정하고 render를 호출한다.

    (src/App.js)
        add = () => {
            this.setState({count: this.state.count +1});
        };
        minus = () => {
            this.setState({count: this.state.count -1});
        };

        -> state 값을 이용하는 것은 좋지 않은 방법
        -> current function(?) 이용
        -> setState를 할 때, react에서 외부의 상태에 의존하지 않는 가장 좋은 방법
    (src/App.js)
        add = () => {
            this.setState(current => ({count: current.count +1}));
        };
        minus = () => {
            this.setState(current => ({count: current.count -1}));
        };    


# 3.2 Component Life Cycle
    class React.Component는 Life Cycle method도 갖는데, 이는 기본적으로 react가 component를 생성하고 없애는 방법이다.
    - component가 생성될 때, render 전에 호출되는 몇가지 function이 있다.
    - component가 render된 후, 호출되는 몇가지 function도 있다.
    - moundting, updating, unmounting ...
    - mounthing : constructor(), static getDerivedStateFromProps()(얘는 생략), render(), componentDidMount()
        - constructor
        (src/App.js)
            import React from "react";

            class App extends React.Component{
            constructor(props) {
                super(props);
                console.log("hello");
            }
            state = {
                count: 0
            };
            add = () => {
                this.setState(current => ({count: current.count +1}));
            };
            minus = () => {
                this.setState(current => ({count: current.count -1}));
            };
            componentDidMount(){
                console.log("componentDidMount")
            }
            render(){
                console.log("render");
                return <div>
                <h1>The number is {this.state.count}</h1>
                <button onClick={this.add}>Add</button>
                <button onClick={this.minus}>Minus</button>
                </div>
            }
            }

            export default App;
        위와 같이 하고 web의 console을 보면 hello, render, componentDidMount 순으로 호출


# 3.3 Planning the Movie Component
    (src/App.js)
        import React from "react";

        class App extends React.Component{
        state = {
            isLoading = true
        };
        render(){
            const {isLoading} = this.state;
            return <div>{isLoading? "Loading" : "We are ready"}</div>       # 3항 연산자: javascript -> isLoading이 참이면 Loading, 거짓이면 We are ready
        }
        }

        export default App;

    * render를 하면 처음에 호출되는 life cycle method는 무엇일까?
        - componentDidMount : 얘가 호출되는데, 여기에 setTimeout을 설정하자
        - setTimeout : delay function
        - componentDidMount에서 data를 fetch 하는 것이 목표

        (src/App.js)
            import React from "react";

            class App extends React.Component{
            state = {
                isLoading: true
            };
            componentDidMount() {
                setTimeout(() =>{
                this.setState({ isLoading: false });                    # isLoading이 false로 setState하는 것이 6초 뒤에 일어날 것이다
                }, 6000)
            }
            render(){
                const {isLoading} = this.state;
                return <div>{isLoading? "Loading" : "We are ready"}</div>
            }
            }

            export default App;


# 4.0 Fetching Movies from API
    javascript에서 data를 fetch 하는 방법은 일반적으로 fetch()이다.
    nicco는 axios 를 주로 이용한다.
    axios는 fetch 위에 있는 작은 layer 의 느낌..
    axio 설치: npm install axios

    yts API: https://yts-proxy.now.sh/list_movies.json 이용

    목표: axios로 부터 오는 data를 잡는 것. data를 잡아야 state에 사용할 수 있다.

    (src/App.js)
        import React from "react";
        import axios from "axios";

        class App extends React.Component{
        state = {
            isLoading: true
        };
        componentDidMount() {
            const movies = axios.get("https://yts-proxy.now.sh/list_movies.json");
        }
        render(){
            const {isLoading} = this.state;
            return <div>{isLoading? "Loading" : "We are ready"}</div>
        }
        }

        export default App;

        위에서 부족한 점은, axios.get이 시간이 걸린다. 이를 위해서 asyns, await 이용
        await가 붙은것이 끝날때까지 기다렸다가 진행이 되도록 하는 것

    (src/App.js)
        import React from "react";
        import axios from "axios";

        class App extends React.Component{
        state = {
            isLoading: true
        };
        getMovies = async () => {
            const movies = await axios.get("https://yts-proxy.now.sh/list_movies.json");
        }
        componentDidMount() {
            this.getMovies();
        }
        render(){
            const {isLoading} = this.state;
            return <div>{isLoading? "Loading" : "We are ready"}</div>
        }
        }

        export default App;

        async await을 하는 것은 javascript에게 getMovies function이 시간이 걸리는 함수이니, 그걸 기다려야한다고 말해주는 것


# 4.1 Rendering the Movies
    (src/App.js)
        import React from "react";
        import axios from "axios";

        class App extends React.Component{
        state = {
            isLoading: true
            movies: []
        };
        getMovies = async () => {
            const movies = await axios.get("https://yts.mx/api/v2/list_movies.json");
            console.log(movies.data.data.movies);
        }
        componentDidMount() {
            this.getMovies();
        }
        render(){
            const {isLoading} = this.state;
            return <div>{isLoading? "Loading" : "We are ready"}</div>
        }
        }

        export default App;
    
    위는 ES6를 활용하지 못함. 아래는 ES6를 활용한 것

    (src/App.js)
        import React from "react";
        import axios from "axios";

        class App extends React.Component{
        state = {
            isLoading: true
            movies: []
        };
        getMovies = async () => {
            const {data: {data: {movies}}} = await axios.get("https://yts.mx/api/v2/list_movies.json");
            console.log(movies);
        }
        componentDidMount() {
            this.getMovies();
        }
        render(){
            const {isLoading} = this.state;
            return <div>{isLoading? "Loading" : "We are ready"}</div>
        }
        }

        export default App;

    이제 movies를 state에 넣어서 활용
    
    (src/App.js)
        import React from "react";
        import axios from "axios";

        class App extends React.Component{
        state = {
            isLoading: true
            movies: []
        };
        getMovies = async () => {
            const {data: {data: {movies}}} = await axios.get("https://yts.mx/api/v2/list_movies.json");
            this.setState({movies:movies})      # state에 있는 movies(앞 movies)에 axios(data)에서 얻은 movies(뒷 movies)에 넣어준다 {movies} 로만 해도 최신 버전의 javascript가 이해 한다고 함... 어떻게?
        }
        componentDidMount() {
            this.getMovies();
        }
        render(){
            const {isLoading} = this.state;
            return <div>{isLoading? "Loading" : "We are ready"}</div>
        }
        }

        export default App;


    (src/Movie.js)
        import React from "react";
        import PropTypes from "prop-types";

        function Movie({id, year, title, summary, poster}){
            return <h4>{title}</h4>
        }

        Movie.propTypes = {
            id: PropTypes.number.isRequired,
            year: PropTypes.number.isRequired,
            title: PropTypes.string.isRequired,
            summary: PropTypes.string.isRequired,
            poster: PropTypes.string.isRequired
        }

        export default Movie;

    (src/App.js)

        import React from "react";
        import axios from "axios";
        import Movie from "./Movie";

        class App extends React.Component{
        state = {
            isLoading: true,
            movies: []
        };
        getMovies = async () => {
            const {data: {data: {movies}}} = await axios.get("https://yts.mx/api/v2/list_movies.json?sort_by=rating");
            this.setState({movies, isLoading: false})
        }
        componentDidMount() {
            this.getMovies();
        }
        render(){
            const {isLoading, movies} = this.state;
            return <div>{isLoading? "Loading" : movies.map(movie => {
            return <Movie key={movie.id} id={movie.id} year={movie.year} title={movie.title} summary={movie.summary} poster={movie.medium_cover_image} />
            })}</div>
        }
        }

        export default App;


# 4.2 Styling the Movies
    (src/App.js)
        import React from "react";
        import axios from "axios";
        import Movie from "./Movie";

        class App extends React.Component{
        state = {
            isLoading: true,
            movies: []
        };
        getMovies = async () => {
            const {data: {data: {movies}}} = await axios.get("https://yts.mx/api/v2/list_movies.json?sort_by=rating");
            this.setState({movies, isLoading: false})
        }
        componentDidMount() {
            this.getMovies();
        }
        render(){
            const {isLoading, movies} = this.state;
            return <section class="container">
            {isLoading? (
            <div class="loader">
                <span class="loader__text">Loading...</span>
                </div>
            ) : (
                <div class="movies">
                {movies.map(movie => (
            <Movie 
            key={movie.id} 
            id={movie.id} 
            year={movie.year} 
            title={movie.title} 
            summary={movie.summary} 
            poster={movie.medium_cover_image} 
            />
                ))}
                </div>
            )}
            </section>
        }
        }

        export default App;

    (src/Movie.js)
        import React from "react";
        import PropTypes from "prop-types";

        function Movie({id, year, title, summary, poster}){
            return( 
            <div class="movie">
                <img src={poster} alt={title} title={title} />
                <div class="movie__data">
                    <h3 class="movie__title">{title}</h3>
                    <h5 class="movie__year">{year}</h5>
                    <p class="movie_summary">{summary}</p>
                </div>
            </div>
            );
        }

        Movie.propTypes = {
            id: PropTypes.number.isRequired,
            year: PropTypes.number.isRequired,
            title: PropTypes.string.isRequired,
            summary: PropTypes.string.isRequired,
            poster: PropTypes.string.isRequired
        }

        export default Movie;

    css 파일을 만들어서 import 해서 적용 가능
    1. App.css, Movie.css 만들기
    (src/App.js)
        import React from "react";
        import axios from "axios";
        import Movie from "./Movie";
        import "./App.css";

        class App extends React.Component{
        state = {
            isLoading: true,
            movies: []
        };
        getMovies = async () => {
            const {data: {data: {movies}}} = await axios.get("https://yts.mx/api/v2/list_movies.json?sort_by=rating");
            this.setState({movies, isLoading: false})
        }
        componentDidMount() {
            this.getMovies();
        }
        render(){
            const {isLoading, movies} = this.state;
            return <section class="container">
            {isLoading? (
            <div class="loader">
                <span class="loader__text">Loading...</span>
                </div>
            ) : (
                <div class="movies">
                {movies.map(movie => (
            <Movie 
            key={movie.id} 
            id={movie.id} 
            year={movie.year} 
            title={movie.title} 
            summary={movie.summary} 
            poster={movie.medium_cover_image} 
            />
                ))}
                </div>
            )}
            </section>
        }
        }

        export default App;


# Adding Genres
    (src.Movie.js)
        Movie.propTypes = {
        id: PropTypes.number.isRequired,
        year: PropTypes.number.isRequired,
        title: PropTypes.string.isRequired,
        summary: PropTypes.string.isRequired,
        poster: PropTypes.string.isRequired,
        genres: PropTypes.arrayOf(PropTypes.string).isRequired,
        }
    
    (src.App.js)
        <Movie 
        key={movie.id} 
        id={movie.id} 
        year={movie.year} 
        title={movie.title} 
        summary={movie.summary} 
        poster={movie.medium_cover_image}
        genres={movie.genres} 
        />

    -> 여기까지 해주고 web console 보면 Warning: Invalid DOM property `class`. Did you mean `className`? 발생
        - 엄밀히 말하면, JSX는 HTML이 아니기 때문에 div 등에 class로 쓰는게 아니라 className 으로 써야 함
            ex) 비슷한 예로. HTML에서는 <label for= ..> 쓸 수 있는데, javascript에서 for는 loop라서 <label htmlFor=..> 이렇게 써야 한다.
    
    (src/Movie.js)
        import React from "react";
        import PropTypes from "prop-types";
        import "./Movie.css";

        function Movie({id, year, title, summary, poster, genres}){
            return( 
            <div className="movie">
                <img src={poster} alt={title} title={title} />
                <div className="movie__data">
                    <h3 className="movie__title">{title}</h3>
                    <h5 className="movie__year">{year}</h5>
                    <p className="movie_summary">{summary}</p>
                </div>
            </div>
            );
        }

        Movie.propTypes = {
            id: PropTypes.number.isRequired,
            year: PropTypes.number.isRequired,
            title: PropTypes.string.isRequired,
            summary: PropTypes.string.isRequired,
            poster: PropTypes.string.isRequired,
            genres: PropTypes.arrayOf(PropTypes.string).isRequired,
        }

        export default Movie;

    (src/App.js)
        import React from "react";
        import axios from "axios";
        import Movie from "./Movie";
        import "./App.css";

        class App extends React.Component{
        state = {
            isLoading: true,
            movies: []
        };
        getMovies = async () => {
            const {data: {data: {movies}}} = await axios.get("https://yts.mx/api/v2/list_movies.json?sort_by=rating");
            this.setState({movies, isLoading: false})
        }
        componentDidMount() {
            this.getMovies();
        }
        render(){
            const {isLoading, movies} = this.state;
            return <section className="container">
            {isLoading? (
            <div className="loader">
                <span className="loader__text">Loading...</span>
                </div>
            ) : (
                <div className="movies">
                {movies.map(movie => (
            <Movie 
            key={movie.id} 
            id={movie.id} 
            year={movie.year} 
            title={movie.title} 
            summary={movie.summary} 
            poster={movie.medium_cover_image}
            genres={movie.genres} 
            />
                ))}
                </div>
            )}
            </section>
        }
        }

        export default App;

    장르는 array에 여러개가 담겨 있으므로 여러개를 풀어서(map) 표현
    (src/Movie.js)
        function Movie({id, year, title, summary, poster, genres}){
            return( 
            <div className="movie">
                <img src={poster} alt={title} title={title} />
                <div className="movie__data">
                    <h3 className="movie__title">{title}</h3>
                    <h5 className="movie__year">{year}</h5>
                    <ul className="genres">{genres.map(genre => (<li className="genres__genre">{genre}</li>))}</ul>
                    <p className="movie_summary">{summary}</p>
                    </div>
            </div>
            );
        }

    위와 같이 하고 web console 보면 "key"가 없다는 오류 발생
    - ID가 없어서 제공할 키가 없다.
    - map function은 또다른 argument를 준다.
    - index, number, current item nubmer 등을 준다(원하는 표현대로 사용)

    (src/Movie.js)
        function Movie({id, year, title, summary, poster, genres}){
            return( 
            <div className="movie">
                <img src={poster} alt={title} title={title} />
                <div className="movie__data">
                    <h3 className="movie__title">{title}</h3>
                    <h5 className="movie__year">{year}</h5>
                    <ul className="genres">
                        {genres.map((genre, index) => (
                            <li key={index} className="genres__genre">{genre}</li>
                        ))}
                    </ul>
                    <p className="movie_summary">{summary}</p>
                    </div>
            </div>
            );
        }


# 4.4 Styles Timelapse


# 4.5 Cutting the summary
    표현되는 글자수를 줄이는 방법 - slice()
    <p className="movie_summary">{summary}</p>
    -> <p className="movie_summary">{summary.slice(0,100)}...</p>


# 5.0 Deploying to Github Pages
    1. console에 npm i gh-pages
    2. package.json 설정
        1) "homepage": "https://{my github username}.github.io/{the name of my project in github}"
        2) "scripts":{
            "~",
            "deploy": "gh-pages -d build",
            "predeploy": "npm run build"
        }
            * build 폴더를 gh-pages에 올린다는 의미인데, npm run build 를 실행해서 우리가 만든 코드들을 압축한 형태로 담은 build 폴더 생성을 먼저 해주자
                - 매번 해주는 걸 자동으로 하기위해 "predeploy": "npm run build" 
            (package.json)
                {
                "name": "movie_app",
                "version": "0.1.0",
                "private": true,
                "dependencies": {
                    "@testing-library/jest-dom": "^5.11.4",
                    "@testing-library/react": "^11.1.0",
                    "@testing-library/user-event": "^12.1.10",
                    "axios": "^0.21.1",
                    "prop-types": "^15.7.2",
                    "react": "^17.0.2",
                    "react-dom": "^17.0.2",
                    "react-scripts": "4.0.3",
                    "web-vitals": "^1.0.1"
                },
                "scripts": {
                    "start": "react-scripts start",
                    "build": "react-scripts build",
                    "deploy": "gh-pages -d build",
                    "predeploy": "npm run build"
                },
                "eslintConfig": {
                    "extends": [
                    "react-app",
                    "react-app/jest"
                    ]
                },
                "browserslist": {
                    "production": [
                    ">0.2%",
                    "not dead",
                    "not op_mini all"
                    ],
                    "development": [
                    "last 1 chrome version",
                    "last 1 firefox version",
                    "last 1 safari version"
                    ]
                },
                "hompage": "https://{my github username}.github.io/{the name of my project in github}"
                }
        
        3) 실제 실행할 때는 npm run deploy 해주면 predeploy를 통해서 build까지 모두 실행

            
# 5.1 Are we done?
    더 이상 state를 갖기 위해 class component를 가질 필요가 없다.
    - react hook 이라는 것을 이용하면 되기 때문