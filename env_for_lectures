# 0.1 Requirements
    preparations: node.JS, npm, npx, git
        node.JS
            설치 확인: 콘솔에 node-v 확인
            설치사이트: nodejs.org
            버전: 상관 없다 함
        npm
            설치 확인: node.JS 설치하고, console에 npm 입력 (node.JS 설치시 npm 자동 설치됨)
        npx
            npx는 별도 설치 필요
            설치 방법: (콘솔) npm install npx -g (node.JS, npm 설치 확인 후 설치)
        git
            설치 확인: (콘솔) git --version
            설치 안되어있으면 git 설치 (github 아니라 git)


# 0.2 Theory Requirements
    preparations: HTML, CSS, JS, node.js(package.json)


# 0.3 Why React


# 1.0 Creating your first React App
    create-react-app
        create-react-app 을 통해서 React Web App을 Set up 해야 편하게 React를 이용할 수 있다.
        설치 방법: (콘솔) cd Documents (Enter) npx create-react-app 파일명 - npx create-react-app movie_app
            (나는 Window라 그런가 cd Documents로 경로 변경이 안돼서 바로 npx create-react-app movie_app 해줌)
    
    READEME.md 내부 내용 삭제(나는 상위 폴더 reactjs에 복사) 후
        React JS Fundamentals Course(2019 Update!) 입력
    
    package.json
            "scripts": {
                "start": "react-scripts start",
                "build": "react-scripts build",
                "test": "react-scripts test",
                "eject": "react-scripts eject"
            },

            에서 test, eject는 필요없으니 지운다

            "scripts": {
                "start": "react-scripts start",
                "build": "react-scripts build",
            },
    
    yarn.lock
        기본적으로 설치할때 따라오는데, 필요 없으니 삭제
    
    개발 시작
        npm start
            나는 npm start 했떠니 아래와 같은 오류 발생
                C:\Users\User\Desktop\reactjs>npm start
                npm ERR! code ENOENT
                npm ERR! syscall open
                npm ERR! path C:\Users\User\Desktop\reactjs\package.json
                npm ERR! errno -4058
                npm ERR! enoent ENOENT: no such file or directory, open 'C:\Users\User\Desktop\reactjs\package.json'
                npm ERR! enoent This is related to npm not being able to find a file.
                npm ERR! enoent

                npm ERR! A complete log of this run can be found in:
                npm ERR!     C:\Users\User\AppData\Roaming\npm-cache\_logs\2021-06-13T05_42_43_603Z-debug.log
            -> 실제 파일이 있는 경로에서 npm start를 해줘야 한다고 함
            -> 나는 movie_app의 상위폴더인 reactjs에서 npm start를 했음
            -> movie_app을 시작경로로 해서 npm start


# 1.1 Creating a github Respository
    (콘솔) git init
    
    github 사이트 가서 respository 생성
        package.json에 있는 name과 되도록 동일하게 respository 생성
        public
        READEME 등 선택사항 건들지 말기
        주어지는 주소 복사: https://github.com/Junanjunan/movie_app.git

    (콘솔) git remote add origin https://github.com/Junanjunan/movie_app.git

    (콘솔) git add . (git add everything)
    (콘솔) git commit -m "#1.0 Creating your first React App"
    (콘솔) git push origin master


# 1.2 How does React work?
    기본적인 것만 가지고 설명할 것이기 때문에 몇가지는 삭제

    (src/index.js)
        기본적으로 아래와 같이 되어 있음

        import React from 'react';
        import ReactDOM from 'react-dom';
        import './index.css';
        import App from './App';
        import reportWebVitals from './reportWebVitals';

        ReactDOM.render(
        <React.StrictMode>
            <App />
        </React.StrictMode>,
        document.getElementById('root')
        );

        // If you want to start measuring performance in your app, pass a function
        // to log results (for example: reportWebVitals(console.log))
        // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
        reportWebVitals();

        여기서 몇가지 지우고 아래와 같이 남긴다

        import React from 'react';
        import ReactDOM from 'react-dom';
        import App from './App';

        ReactDOM.render(
        <React.StrictMode>
            <App />
        </React.StrictMode>,
        document.getElementById('root')
        );
    
    (src)
        logo.svg 삭제
        serviceWorker.js 삭제 (난 처음부터 없음)
        index.css 삭제
        App.test.js 삭제
        App.css 삭제
        최종적으로 index.js, App.js만 남기면 된다고 함(나는 우선 언급안되고 남아있는 것들 삭제 안하고 남겨둠)

    (src/App.js)
        import logo from './logo.svg'; 삭제
        import './App.css'; 삭제
        강에의는 import React from 'react'; 가 있는데 난 없음 -> 추가? 우선 없이 해보자

        (처음)
        import logo from './logo.svg';
        import './App.css';

        function App() {
        return (
            <div className="App">
            <header className="App-header">
                <img src={logo} className="App-logo" alt="logo" />
                <p>
                Edit <code>src/App.js</code> and save to reload.
                </p>
                <a
                className="App-link"
                href="https://reactjs.org"
                target="_blank"
                rel="noopener noreferrer"
                >
                Learn React
                </a>
            </header>
            </div>
        );
        }

        export default App;

        (지우고 난 후)
        function App() {
        return (
            <div className="App">
            </div>
        );
        }

        export default App;


    (src/App.js)
        function App() {
        return (
            <div className="App">
            Hello
            </div>
        );
        }

        export default App;
        등 넣어주면 자동으로 웹에 반영

    (public/index.html)
        <div id="root"></div> 
        
        비어있음, 근데 web에서 f12 해서 보면 
        <div id="root">
            <div class="App">Hello</div>
        </div>
        로 되어있음

        -> React의 기능임
        (src/index.js)를 보면 알 수 있음
            ReactDOM.render(
            <React.StrictMode>
                <App />
            </React.StrictMode>,
            document.getElementById('root')
            );


# 2.0 JSX & PROPS
    (src/index.js)를 보면 알 수 있음
        ReactDOM.render(
        <React.StrictMode>
            <App />                         # <App />: component라 한다. 
        </React.StrictMode>,
        document.getElementById('root')
        );

    component: HTML을 반환하는 함수
        위에서 <App />을 App 같은 형태로 사용 할 수 없다
        -> <App /> 같이 javascript와 HTML 사이의 이러한 조합을 JSX 라고 한다. (react에서 나온 react에 특화된 개념)

    component를 만드는 방법 실습
        
        (src/Potato.js)
            import React from "react";   # component를 작성할 때마다 호출해줘야 함 : 이것을 하지 않으면 react가 이곳에 jsx가 있는 component를 사용하는 것을 이해하지 못함

            function Potato() {          # Potato(): 대문자로 시작해야 함
                return <h3>I love potato</h3>;
            }

            export default Potato;
        
        (src/index.js) 에 추가해서
            import React from 'react';
            import ReactDOM from 'react-dom';
            import App from './App';

            ReactDOM.render(
            <React.StrictMode>
                <App />
            </React.StrictMode>,
            document.getElementById('root')
            );

            아래와 같이 하면 오류가 난다고 했는데, 이제 버전이 바껴서 아래와 같이 해도 오류 안나고 실행 됨
            import React from 'react';
            import ReactDOM from 'react-dom';
            import App from './App';
            import Potato from "./Potato";

            ReactDOM.render(
            <React.StrictMode>
                <App /><Potato />
            </React.StrictMode>,
            document.getElementById('root')
            );
            
            -> react application이 하나의 component만을 rendering 해야하기 때문.(여기서 그 하나의 component가 App)
            -> Potato component를 옮기자

        * 예전 버전에서는 위 방법 안됐지만, 지금은 된다. 위 방법이 더 간결한 듯
        (src/index.js)
            import React from 'react';
            import ReactDOM from 'react-dom';
            import App from './App';

            ReactDOM.render(
            <React.StrictMode>
                <App />
            </React.StrictMode>,
            document.getElementById('root')
            );
        
        (src/App.js)
            import Potato from './Potato';

            function App() {
            return (
                <div className="App">
                    <h1>Hello</h1>
                    <Potato />
                </div>
            );
            }

            export default App;


# 2.1 Reusable Components with JSX+Props
    file 간의 혼란을 피하기 위해 Potato.js file을 지우자
    JSX에서 두번째로 이해해야 하는 것: component에 정보를 보낼 수 있다는 것
    react가 멋진 이유는 재사용 가능한 component를 만들 수 있다는 점(반복 사용 가능)

    component가 정보를 어떻게 전달하는지 보자
    (src/Food.js)
        import React from "react";

        function Food(props) {
            console.log(props);
            return (
                <h1>I like food</h1>
            );
        }

        export default Food;

    (src/index.js)
        import React from 'react';
        import ReactDOM from 'react-dom';
        import App from './App';
        import Potato from './Potato';
        import Food from './Food';

        ReactDOM.render(
        <React.StrictMode>
            <App /><Potato /><Food fav="kimchi"/>
        </React.StrictMode>,
        document.getElementById('root')
        );

        fav를 props라 한다.
        위와 같이 하고 웹에서 console을 보면 Object로 fav: "kimchi"가 있는 것을 볼 수 있다
        이 Object는 component로 전달 된 모든 props(정보)들이다.
    
    (src/Food.js)
        import React from "react";

        function Food(props) {
            console.log(props.fav);
            return (
                <h1>I like {props.fav}</h1>
            );
        }

        export default Food;

    또는
    (src/Food.js)
        import React from "react";

        function Food({fav}) {
            console.log(fav);
            return (
                <h1>I like {fav}</h1>
            );
        }

        export default Food;
    위와 같이 해서 중복적으로 component를 props와 함께 사용